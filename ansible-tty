#!/usr/bin/env python3
'''
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
'''

import json
import subprocess
import shutil
import argparse
import sys
import termios
import os
from tabulate import tabulate

EXECUTABLES = ["ssh", "ansible-inventory"]
OPTIONAL_SSH_VARS = [
    {
        "key": 'ansible_ssh_private_key_file',
        "flag": '-i'
    },
    {
        "key": 'ansible_ssh_common_args',
        "flag": None
    },
    {
        "key": 'ansible_ssh_extra_args',
        "flag": None
    },
    {
        "key": 'ansible_port',
        "flag": '-p'
    },
]


def check_python_version():
    if not sys.version_info[:2] >= (3, 5):
        print("You need python 3.5 or greeter")
        raise SystemExit(1)


def check_executable():
    for executable in EXECUTABLES:
        if shutil.which(executable) is None:
            print("Can't find {} executable".format(executable))
            print("You must have installed ansible >=2.4 and ssh client")
            raise SystemExit(1)


def parser_args():
    parser = argparse.ArgumentParser(
             description="""Init an ssh interactive terminal
                using ansible inventories""")

    parser.add_argument("-i", "--inventory", required=False,
                              help='''use a specific ansible inventory''',
                              type=str)

    parser.add_argument("-k", "--key", required=False,
                              help='''use a specific private ssh keyfile''',
                              type=str)

    parser.add_argument("hostname", action="store", type=str,
                        default=None, nargs='?',
                        help='''Try to filter and connect
                        to the unique hostname''')

    return parser.parse_args()


def get_inventory(inventory_path):
    ''' receive and inventory path (string) from argparse (the value could be None)
    and run "ansible-inventory" cmd with custom or default inventory.
    Return an ansible inventory in json format'''
    ansible_cmd = ['ansible-inventory', '--list']
    if inventory_path and os.path.exists(inventory_path):
        ansible_cmd.extend(["-i", inventory_path])
    print("Getting inventory... please wait")
    proc = subprocess.run(ansible_cmd, stdout=subprocess.PIPE, timeout=20)
    if proc.returncode != 0:
        print(proc.stdout.decode('utf-8'))
        raise SystemExit(proc.returncode)
    return json.loads(proc.stdout.decode('utf-8'))


def choose_host(inventory):
    """Scan the inventory and let the user choose one host to connect.
    Receives an inventory and return a dict with the vars of the chosen host.
    """
    all_hostvars = inventory["_meta"]["hostvars"]
    # never wants localhost
    for host in ["localhost", "127.0.0.1"]:
        if host in all_hostvars:
            all_hostvars.pop(host)
    print("Choose a host:")
    lines = sorted([
                [
                    host,
                    all_hostvars[host].get("ansible_host", None),
                    all_hostvars[host].get("ansible_ssh_host", None),
                    all_hostvars[host].get("ec2_tag_Name", None)
                ]
                for host in all_hostvars
            ])
    termios.tcflush(sys.stdin, termios.TCIOFLUSH)
    option = None
    print(tabulate(lines, showindex="always"))
    while option not in range(len(lines)):
        try:
            option = int(
                input("choose a valid option or press CRTL + C to exit: \n"))
        except ValueError:
            pass
    result = lines[option][0]
    return result


def get_host_vars(inventory, hostname):
    '''Receive an ansible inventory in json format
    and the desired hostname from argparse.
    Returns the vars (dict) of the hostname'''
    all_hostvars = inventory["_meta"]["hostvars"]
    if hostname not in all_hostvars:
        hostname = choose_host(inventory)
    host = all_hostvars[hostname]

    # Normalize host address
    if "ansible_ssh_host" in host:
        all_hostvars[hostname]["ansible_host"] = host["ansible_ssh_host"]
    if "ansible_host" not in host:
        host["ansible_host"] = hostname

    return host


def compose_ssh_cmd(hostvars):
    """Compose the final ssh cmd using the vars of the host
    Receives the inventory of a host and return list of strings."""
    ssh_cmd = ['ssh']
    if 'ansible_user' in hostvars:
        host = [hostvars['ansible_user'] + '@' +
                hostvars['ansible_host']]
    else:
        host = [hostvars['ansible_host']]
    ssh_cmd.extend(host)
    for opt in OPTIONAL_SSH_VARS:
        if opt["key"] in hostvars:
            if opt["flag"]:
                ssh_cmd.extend([opt["flag"]])
            ssh_cmd.extend([str(hostvars[opt["key"]])])
    if private_key:
        try:
            private_key_flag = ssh_cmd.index("-i")
        except:
            private_key_flag = None
        if private_key_flag:
            ssh_cmd[private_key_flag+1] = private_key
        else:
            ssh_cmd.extend(["-i", private_key])
    return ssh_cmd


def main():
    check_python_version()
    check_executable()
    args = parser_args()
    hostname = args.hostname
    inventory_path = args.inventory
    global private_key
    private_key = args.key
    inventory = get_inventory(inventory_path)
    inventory_host = get_host_vars(inventory, hostname)
    subprocess.run(compose_ssh_cmd(inventory_host))


if __name__ == "__main__":
    main()
